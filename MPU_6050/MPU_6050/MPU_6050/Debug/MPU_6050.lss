
MPU_6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000010e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000106c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000010e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019b3  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a69  00000000  00000000  00002c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b81  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000687  00000000  00000000  00004614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c5  00000000  00000000  00004c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_13>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	ec e6       	ldi	r30, 0x6C	; 108
      aa:	f0 e1       	ldi	r31, 0x10	; 16
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	a0 30       	cpi	r26, 0x00	; 0
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a4 30       	cpi	r26, 0x04	; 4
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
      cc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
      d4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
      d8:	8c e0       	ldi	r24, 0x0C	; 12
      da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
      de:	08 95       	ret

000000e0 <i2c_start>:
      e0:	94 ea       	ldi	r25, 0xA4	; 164
      e2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      e6:	ec eb       	ldi	r30, 0xBC	; 188
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	90 81       	ld	r25, Z
      ec:	99 23       	and	r25, r25
      ee:	ec f7       	brge	.-6      	; 0xea <i2c_start+0xa>
      f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
      f4:	98 7f       	andi	r25, 0xF8	; 248
      f6:	98 30       	cpi	r25, 0x08	; 8
      f8:	11 f0       	breq	.+4      	; 0xfe <i2c_start+0x1e>
      fa:	90 31       	cpi	r25, 0x10	; 16
      fc:	a1 f4       	brne	.+40     	; 0x126 <i2c_start+0x46>
      fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     102:	84 e8       	ldi	r24, 0x84	; 132
     104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     108:	ec eb       	ldi	r30, 0xBC	; 188
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	88 23       	and	r24, r24
     110:	ec f7       	brge	.-6      	; 0x10c <i2c_start+0x2c>
     112:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     116:	98 7f       	andi	r25, 0xF8	; 248
     118:	98 31       	cpi	r25, 0x18	; 24
     11a:	39 f0       	breq	.+14     	; 0x12a <i2c_start+0x4a>
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	90 34       	cpi	r25, 0x40	; 64
     120:	29 f4       	brne	.+10     	; 0x12c <i2c_start+0x4c>
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	08 95       	ret
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	08 95       	ret
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	08 95       	ret

0000012e <i2c_start_wait>:
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	ec eb       	ldi	r30, 0xBC	; 188
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	24 ea       	ldi	r18, 0xA4	; 164
     138:	a9 eb       	ldi	r26, 0xB9	; 185
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	cb eb       	ldi	r28, 0xBB	; 187
     13e:	d0 e0       	ldi	r29, 0x00	; 0
     140:	34 e8       	ldi	r19, 0x84	; 132
     142:	44 e9       	ldi	r20, 0x94	; 148
     144:	20 83       	st	Z, r18
     146:	90 81       	ld	r25, Z
     148:	99 23       	and	r25, r25
     14a:	ec f7       	brge	.-6      	; 0x146 <i2c_start_wait+0x18>
     14c:	9c 91       	ld	r25, X
     14e:	98 7f       	andi	r25, 0xF8	; 248
     150:	98 30       	cpi	r25, 0x08	; 8
     152:	11 f0       	breq	.+4      	; 0x158 <i2c_start_wait+0x2a>
     154:	90 31       	cpi	r25, 0x10	; 16
     156:	b1 f7       	brne	.-20     	; 0x144 <i2c_start_wait+0x16>
     158:	88 83       	st	Y, r24
     15a:	30 83       	st	Z, r19
     15c:	90 81       	ld	r25, Z
     15e:	99 23       	and	r25, r25
     160:	ec f7       	brge	.-6      	; 0x15c <i2c_start_wait+0x2e>
     162:	9c 91       	ld	r25, X
     164:	98 7f       	andi	r25, 0xF8	; 248
     166:	90 32       	cpi	r25, 0x20	; 32
     168:	11 f0       	breq	.+4      	; 0x16e <i2c_start_wait+0x40>
     16a:	98 35       	cpi	r25, 0x58	; 88
     16c:	29 f4       	brne	.+10     	; 0x178 <i2c_start_wait+0x4a>
     16e:	40 83       	st	Z, r20
     170:	90 81       	ld	r25, Z
     172:	94 fd       	sbrc	r25, 4
     174:	fd cf       	rjmp	.-6      	; 0x170 <i2c_start_wait+0x42>
     176:	e6 cf       	rjmp	.-52     	; 0x144 <i2c_start_wait+0x16>
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <i2c_rep_start>:
     17e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_start>
     182:	08 95       	ret

00000184 <i2c_stop>:
     184:	84 e9       	ldi	r24, 0x94	; 148
     186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     18a:	ec eb       	ldi	r30, 0xBC	; 188
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	84 fd       	sbrc	r24, 4
     192:	fd cf       	rjmp	.-6      	; 0x18e <i2c_stop+0xa>
     194:	08 95       	ret

00000196 <i2c_write>:
     196:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     19a:	84 e8       	ldi	r24, 0x84	; 132
     19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1a0:	ec eb       	ldi	r30, 0xBC	; 188
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	88 23       	and	r24, r24
     1a8:	ec f7       	brge	.-6      	; 0x1a4 <i2c_write+0xe>
     1aa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1ae:	98 7f       	andi	r25, 0xF8	; 248
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	98 32       	cpi	r25, 0x28	; 40
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <i2c_write+0x22>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	08 95       	ret

000001ba <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1ba:	84 e8       	ldi	r24, 0x84	; 132
     1bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     1c0:	ec eb       	ldi	r30, 0xBC	; 188
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	88 23       	and	r24, r24
     1c8:	ec f7       	brge	.-6      	; 0x1c4 <i2c_readNak+0xa>
	
    return TWDR;
     1ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     1ce:	08 95       	ret

000001d0 <i2c_read_byte>:




// read one byte from dev, stored in value, return 1 for error
void i2c_read_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data){
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	c8 2f       	mov	r28, r24
     1da:	d6 2f       	mov	r29, r22
     1dc:	8a 01       	movw	r16, r20

	i2c_start_wait(dev_addr+I2C_WRITE); 	//start i2c to write register address
     1de:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_start_wait>
	i2c_write(reg_addr);			//write address of register to read
     1e2:	8d 2f       	mov	r24, r29
     1e4:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_write>
	i2c_rep_start(dev_addr+I2C_READ);	//restart i2c to start reading
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	8c 0f       	add	r24, r28
     1ec:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_rep_start>
	*data = i2c_readNak();
     1f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <i2c_readNak>
     1f4:	f8 01       	movw	r30, r16
     1f6:	80 83       	st	Z, r24
        i2c_stop();
     1f8:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_stop>

}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	08 95       	ret

00000206 <i2c_write_byte>:



// write one byte to dev
void i2c_write_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t data){
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	d6 2f       	mov	r29, r22
     20c:	c4 2f       	mov	r28, r20
	
	i2c_start_wait(dev_addr+I2C_WRITE);
     20e:	0e 94 97 00 	call	0x12e	; 0x12e <i2c_start_wait>
 	i2c_write(reg_addr);                     
     212:	8d 2f       	mov	r24, r29
     214:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_write>
        i2c_write(data);
     218:	8c 2f       	mov	r24, r28
     21a:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_write>
	i2c_stop();
     21e:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_stop>

}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <timer_setup>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     22c:	ef e6       	ldi	r30, 0x6F	; 111
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	81 60       	ori	r24, 0x01	; 1
     234:	80 83       	st	Z, r24
     236:	e1 e8       	ldi	r30, 0x81	; 129
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	82 60       	ori	r24, 0x02	; 2
     23e:	80 83       	st	Z, r24
     240:	80 81       	ld	r24, Z
     242:	8a 7f       	andi	r24, 0xFA	; 250
     244:	80 83       	st	Z, r24
     246:	08 95       	ret

00000248 <get_time>:
     248:	8f 92       	push	r8
     24a:	9f 92       	push	r9
     24c:	af 92       	push	r10
     24e:	bf 92       	push	r11
     250:	cf 92       	push	r12
     252:	df 92       	push	r13
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
     25e:	f8 94       	cli
     260:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     264:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     268:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_end>
     26c:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_end+0x1>
     270:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_end+0x2>
     274:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_end+0x3>
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	78 2b       	or	r23, r24
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 ab 06 	call	0xd56	; 0xd56 <__floatunsisf>
     284:	2d eb       	ldi	r18, 0xBD	; 189
     286:	37 e3       	ldi	r19, 0x37	; 55
     288:	46 e0       	ldi	r20, 0x06	; 6
     28a:	55 e3       	ldi	r21, 0x35	; 53
     28c:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     290:	4b 01       	movw	r8, r22
     292:	5c 01       	movw	r10, r24
     294:	2d eb       	ldi	r18, 0xBD	; 189
     296:	37 e3       	ldi	r19, 0x37	; 55
     298:	46 e0       	ldi	r20, 0x06	; 6
     29a:	5d e3       	ldi	r21, 0x3D	; 61
     29c:	c7 01       	movw	r24, r14
     29e:	b6 01       	movw	r22, r12
     2a0:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     2a4:	9b 01       	movw	r18, r22
     2a6:	ac 01       	movw	r20, r24
     2a8:	c5 01       	movw	r24, r10
     2aa:	b4 01       	movw	r22, r8
     2ac:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     2b0:	68 83       	st	Y, r22
     2b2:	79 83       	std	Y+1, r23	; 0x01
     2b4:	8a 83       	std	Y+2, r24	; 0x02
     2b6:	9b 83       	std	Y+3, r25	; 0x03
     2b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
     2bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
     2c0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end+0x2>
     2c4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x3>
     2c8:	78 94       	sei
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	df 90       	pop	r13
     2d4:	cf 90       	pop	r12
     2d6:	bf 90       	pop	r11
     2d8:	af 90       	pop	r10
     2da:	9f 90       	pop	r9
     2dc:	8f 90       	pop	r8
     2de:	08 95       	ret

000002e0 <__vector_13>:
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	2f 93       	push	r18
     2ec:	3f 93       	push	r19
     2ee:	4f 93       	push	r20
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
     302:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
     306:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
     30a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end+0x2>
     30e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x3>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e8       	ldi	r20, 0x80	; 128
     318:	5f e3       	ldi	r21, 0x3F	; 63
     31a:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     31e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_end>
     322:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_end+0x1>
     326:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end+0x2>
     32a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x3>
     32e:	ff 91       	pop	r31
     330:	ef 91       	pop	r30
     332:	bf 91       	pop	r27
     334:	af 91       	pop	r26
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	7f 91       	pop	r23
     33c:	6f 91       	pop	r22
     33e:	5f 91       	pop	r21
     340:	4f 91       	pop	r20
     342:	3f 91       	pop	r19
     344:	2f 91       	pop	r18
     346:	0f 90       	pop	r0
     348:	0f be       	out	0x3f, r0	; 63
     34a:	0f 90       	pop	r0
     34c:	1f 90       	pop	r1
     34e:	18 95       	reti

00000350 <uart_init>:
     350:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     354:	83 e3       	ldi	r24, 0x33	; 51
     356:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     35a:	e1 ec       	ldi	r30, 0xC1	; 193
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	88 61       	ori	r24, 0x18	; 24
     362:	80 83       	st	Z, r24
     364:	80 81       	ld	r24, Z
     366:	80 68       	ori	r24, 0x80	; 128
     368:	80 83       	st	Z, r24
     36a:	e2 ec       	ldi	r30, 0xC2	; 194
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	86 60       	ori	r24, 0x06	; 6
     372:	80 83       	st	Z, r24
     374:	08 95       	ret

00000376 <uart_putdouble>:
	uart_putchar(a);

}


void uart_putdouble(double data){
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <uart_putdouble+0x6>
     37c:	00 d0       	rcall	.+0      	; 0x37e <uart_putdouble+0x8>
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	69 83       	std	Y+1, r22	; 0x01
     384:	7a 83       	std	Y+2, r23	; 0x02
     386:	8b 83       	std	Y+3, r24	; 0x03
     388:	9c 83       	std	Y+4, r25	; 0x04

	
}

void uart_putchar(char data) {
	UDR0 = data;                  // Display character on serial (i.e., PuTTY) terminal
     38a:	e6 ec       	ldi	r30, 0xC6	; 198
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	60 83       	st	Z, r22
     390:	2f ef       	ldi	r18, 0xFF	; 255
     392:	83 ec       	ldi	r24, 0xC3	; 195
     394:	99 e0       	ldi	r25, 0x09	; 9
     396:	21 50       	subi	r18, 0x01	; 1
     398:	80 40       	sbci	r24, 0x00	; 0
     39a:	90 40       	sbci	r25, 0x00	; 0
     39c:	e1 f7       	brne	.-8      	; 0x396 <uart_putdouble+0x20>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <uart_putdouble+0x2a>
     3a0:	00 00       	nop


void uart_putdouble(double data){
	char * a = &data;
	uart_putchar(*(a++));
	uart_putchar(*(a++));
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02

	
}

void uart_putchar(char data) {
	UDR0 = data;                  // Display character on serial (i.e., PuTTY) terminal
     3a4:	80 83       	st	Z, r24
     3a6:	2f ef       	ldi	r18, 0xFF	; 255
     3a8:	83 ec       	ldi	r24, 0xC3	; 195
     3aa:	99 e0       	ldi	r25, 0x09	; 9
     3ac:	21 50       	subi	r18, 0x01	; 1
     3ae:	80 40       	sbci	r24, 0x00	; 0
     3b0:	90 40       	sbci	r25, 0x00	; 0
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <uart_putdouble+0x36>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <uart_putdouble+0x40>
     3b6:	00 00       	nop

void uart_putdouble(double data){
	char * a = &data;
	uart_putchar(*(a++));
	uart_putchar(*(a++));
	uart_putchar(*(a++));
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03

	
}

void uart_putchar(char data) {
	UDR0 = data;                  // Display character on serial (i.e., PuTTY) terminal
     3ba:	80 83       	st	Z, r24
     3bc:	2f ef       	ldi	r18, 0xFF	; 255
     3be:	83 ec       	ldi	r24, 0xC3	; 195
     3c0:	99 e0       	ldi	r25, 0x09	; 9
     3c2:	21 50       	subi	r18, 0x01	; 1
     3c4:	80 40       	sbci	r24, 0x00	; 0
     3c6:	90 40       	sbci	r25, 0x00	; 0
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <uart_putdouble+0x4c>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <uart_putdouble+0x56>
     3cc:	00 00       	nop
void uart_putdouble(double data){
	char * a = &data;
	uart_putchar(*(a++));
	uart_putchar(*(a++));
	uart_putchar(*(a++));
	uart_putchar(*a);
     3ce:	8c 81       	ldd	r24, Y+4	; 0x04

	
}

void uart_putchar(char data) {
	UDR0 = data;                  // Display character on serial (i.e., PuTTY) terminal
     3d0:	80 83       	st	Z, r24
     3d2:	2f ef       	ldi	r18, 0xFF	; 255
     3d4:	83 ec       	ldi	r24, 0xC3	; 195
     3d6:	99 e0       	ldi	r25, 0x09	; 9
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	80 40       	sbci	r24, 0x00	; 0
     3dc:	90 40       	sbci	r25, 0x00	; 0
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <uart_putdouble+0x62>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <uart_putdouble+0x6c>
     3e2:	00 00       	nop
	uart_putchar(*(a++));
	uart_putchar(*(a++));
	uart_putchar(*(a++));
	uart_putchar(*a);

}
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <main>:
void uart_putint16(int16_t data);
//send double as 8 chars
//care needed on PC side
void uart_putdouble(double data);

int main(void){
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	ac 97       	sbiw	r28, 0x2c	; 44
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61

sei();  
     406:	78 94       	sei
uart_init();
     408:	0e 94 a8 01 	call	0x350	; 0x350 <uart_init>
i2c_init();
     40c:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2c_init>

DDRB |= _BV(5);
     410:	25 9a       	sbi	0x04, 5	; 4

double dt;
char s[30];

// initialize & test MPU5060 availability
ret = i2c_start(MPU6050_ADDRESS+I2C_WRITE);
     412:	82 ed       	ldi	r24, 0xD2	; 210
     414:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_start>
if(~ret){
	PORTB |= _BV(5);
     418:	2d 9a       	sbi	0x05, 5	; 5
     41a:	2f ef       	ldi	r18, 0xFF	; 255
     41c:	81 ee       	ldi	r24, 0xE1	; 225
     41e:	94 e0       	ldi	r25, 0x04	; 4
     420:	21 50       	subi	r18, 0x01	; 1
     422:	80 40       	sbci	r24, 0x00	; 0
     424:	90 40       	sbci	r25, 0x00	; 0
     426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
	_delay_ms(200);
	PORTB &= ~(_BV(5));
     42c:	2d 98       	cbi	0x05, 5	; 5
}

mpu6050_init();
     42e:	0e 94 34 04 	call	0x868	; 0x868 <mpu6050_init>
timer_setup();
     432:	0e 94 14 01 	call	0x228	; 0x228 <timer_setup>
     436:	14 e1       	ldi	r17, 0x14	; 20

// find gyro bias
biasX = 0;
biasY = 0;
     438:	c1 2c       	mov	r12, r1
     43a:	d1 2c       	mov	r13, r1
     43c:	76 01       	movw	r14, r12

mpu6050_init();
timer_setup();

// find gyro bias
biasX = 0;
     43e:	46 01       	movw	r8, r12
     440:	57 01       	movw	r10, r14
biasY = 0;
uint8_t i;
for(i=0; i<20; i++){
	mpu6050_read_gyro_ALL(gyro_buff);
     442:	ce 01       	movw	r24, r28
     444:	07 96       	adiw	r24, 0x07	; 7
     446:	0e 94 89 04 	call	0x912	; 0x912 <mpu6050_read_gyro_ALL>
	biasX += gyro_buff[0];
     44a:	6f 81       	ldd	r22, Y+7	; 0x07
     44c:	78 85       	ldd	r23, Y+8	; 0x08
     44e:	07 2e       	mov	r0, r23
     450:	00 0c       	add	r0, r0
     452:	88 0b       	sbc	r24, r24
     454:	99 0b       	sbc	r25, r25
     456:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
     45a:	9b 01       	movw	r18, r22
     45c:	ac 01       	movw	r20, r24
     45e:	c5 01       	movw	r24, r10
     460:	b4 01       	movw	r22, r8
     462:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     466:	4b 01       	movw	r8, r22
     468:	5c 01       	movw	r10, r24
	biasY += gyro_buff[1];
     46a:	69 85       	ldd	r22, Y+9	; 0x09
     46c:	7a 85       	ldd	r23, Y+10	; 0x0a
     46e:	07 2e       	mov	r0, r23
     470:	00 0c       	add	r0, r0
     472:	88 0b       	sbc	r24, r24
     474:	99 0b       	sbc	r25, r25
     476:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	c7 01       	movw	r24, r14
     480:	b6 01       	movw	r22, r12
     482:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     486:	6b 01       	movw	r12, r22
     488:	7c 01       	movw	r14, r24
     48a:	11 50       	subi	r17, 0x01	; 1

// find gyro bias
biasX = 0;
biasY = 0;
uint8_t i;
for(i=0; i<20; i++){
     48c:	d1 f6       	brne	.-76     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	PORTB |= _BV(5);
	_delay_ms(20);
	PORTB &= ~(_BV(5));
	*/
}
biasX = biasX/20*(3.14159/180)/1000/32768;
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 ea       	ldi	r20, 0xA0	; 160
     494:	51 e4       	ldi	r21, 0x41	; 65
     496:	c5 01       	movw	r24, r10
     498:	b4 01       	movw	r22, r8
     49a:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
     49e:	2e e2       	ldi	r18, 0x2E	; 46
     4a0:	3a ef       	ldi	r19, 0xFA	; 250
     4a2:	4e e8       	ldi	r20, 0x8E	; 142
     4a4:	5c e3       	ldi	r21, 0x3C	; 60
     4a6:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4a e7       	ldi	r20, 0x7A	; 122
     4b0:	54 e4       	ldi	r21, 0x44	; 68
     4b2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	58 e3       	ldi	r21, 0x38	; 56
     4be:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     4c2:	6d a3       	std	Y+37, r22	; 0x25
     4c4:	7e a3       	std	Y+38, r23	; 0x26
     4c6:	8f a3       	std	Y+39, r24	; 0x27
     4c8:	98 a7       	std	Y+40, r25	; 0x28
biasY = biasY/20*(3.14159/180)/1000/32768;
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 ea       	ldi	r20, 0xA0	; 160
     4d0:	51 e4       	ldi	r21, 0x41	; 65
     4d2:	c7 01       	movw	r24, r14
     4d4:	b6 01       	movw	r22, r12
     4d6:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
     4da:	2e e2       	ldi	r18, 0x2E	; 46
     4dc:	3a ef       	ldi	r19, 0xFA	; 250
     4de:	4e e8       	ldi	r20, 0x8E	; 142
     4e0:	5c e3       	ldi	r21, 0x3C	; 60
     4e2:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	4a e7       	ldi	r20, 0x7A	; 122
     4ec:	54 e4       	ldi	r21, 0x44	; 68
     4ee:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	58 e3       	ldi	r21, 0x38	; 56
     4fa:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     4fe:	69 a7       	std	Y+41, r22	; 0x29
     500:	7a a7       	std	Y+42, r23	; 0x2a
     502:	8b a7       	std	Y+43, r24	; 0x2b
     504:	9c a7       	std	Y+44, r25	; 0x2c
// initialization for Kalman filter
double P = 0.0;
double Q = 0.001;
double R = 0.03;
double Pp, K;
mpu6050_read_accel_ALL(accel_buff);
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <mpu6050_read_accel_ALL>
phi_prev = atan2(accelY, accelZ); // row
     50e:	41 2c       	mov	r4, r1
     510:	51 2c       	mov	r5, r1
     512:	32 01       	movw	r6, r4
     514:	a3 01       	movw	r20, r6
     516:	92 01       	movw	r18, r4
     518:	c3 01       	movw	r24, r6
     51a:	b2 01       	movw	r22, r4
     51c:	0e 94 ab 05 	call	0xb56	; 0xb56 <atan2>
     520:	6d 8b       	std	Y+21, r22	; 0x15
     522:	7e 8b       	std	Y+22, r23	; 0x16
     524:	8f 8b       	std	Y+23, r24	; 0x17
     526:	98 8f       	std	Y+24, r25	; 0x18
theta_prev = atan2(-accelX, sqrt(accelY*accelY+accelZ*accelZ)); // pitch
     528:	a3 01       	movw	r20, r6
     52a:	92 01       	movw	r18, r4
     52c:	c3 01       	movw	r24, r6
     52e:	b2 01       	movw	r22, r4
     530:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     534:	6b 01       	movw	r12, r22
     536:	7c 01       	movw	r14, r24
     538:	a3 01       	movw	r20, r6
     53a:	92 01       	movw	r18, r4
     53c:	c3 01       	movw	r24, r6
     53e:	b2 01       	movw	r22, r4
     540:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     544:	9b 01       	movw	r18, r22
     546:	ac 01       	movw	r20, r24
     548:	c7 01       	movw	r24, r14
     54a:	b6 01       	movw	r22, r12
     54c:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     550:	0e 94 db 07 	call	0xfb6	; 0xfb6 <sqrt>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e8       	ldi	r25, 0x80	; 128
     560:	0e 94 ab 05 	call	0xb56	; 0xb56 <atan2>
     564:	69 8f       	std	Y+25, r22	; 0x19
     566:	7a 8f       	std	Y+26, r23	; 0x1a
     568:	8b 8f       	std	Y+27, r24	; 0x1b
     56a:	9c 8f       	std	Y+28, r25	; 0x1c
}
biasX = biasX/20*(3.14159/180)/1000/32768;
biasY = biasY/20*(3.14159/180)/1000/32768;

// initialization for Kalman filter
double P = 0.0;
     56c:	49 8a       	std	Y+17, r4	; 0x11
     56e:	5a 8a       	std	Y+18, r5	; 0x12
     570:	6b 8a       	std	Y+19, r6	; 0x13
     572:	7c 8a       	std	Y+20, r7	; 0x14

	
}

void uart_putchar(char data) {
	UDR0 = data;                  // Display character on serial (i.e., PuTTY) terminal
     574:	0f 2e       	mov	r0, r31
     576:	f6 ec       	ldi	r31, 0xC6	; 198
     578:	2f 2e       	mov	r2, r31
     57a:	31 2c       	mov	r3, r1
     57c:	f0 2d       	mov	r31, r0
     57e:	1a e0       	ldi	r17, 0x0A	; 10
mpu6050_read_accel_ALL(accel_buff);
phi_prev = atan2(accelY, accelZ); // row
theta_prev = atan2(-accelX, sqrt(accelY*accelY+accelZ*accelZ)); // pitch

for(;;){
	get_time(&dt);
     580:	ce 01       	movw	r24, r28
     582:	0d 96       	adiw	r24, 0x0d	; 13
     584:	0e 94 24 01 	call	0x248	; 0x248 <get_time>
	mpu6050_read_accel_ALL(accel_buff);
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <mpu6050_read_accel_ALL>
	mpu6050_read_gyro_ALL(gyro_buff);
     590:	ce 01       	movw	r24, r28
     592:	07 96       	adiw	r24, 0x07	; 7
     594:	0e 94 89 04 	call	0x912	; 0x912 <mpu6050_read_gyro_ALL>
	
	// acceleration (m/s^2)
	accelX = accel_buff[0]*9.8*2/32768;
	accelY = accel_buff[1]*9.8*2/32768;
     598:	6b 81       	ldd	r22, Y+3	; 0x03
     59a:	7c 81       	ldd	r23, Y+4	; 0x04
     59c:	07 2e       	mov	r0, r23
     59e:	00 0c       	add	r0, r0
     5a0:	88 0b       	sbc	r24, r24
     5a2:	99 0b       	sbc	r25, r25
     5a4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
     5a8:	2d ec       	ldi	r18, 0xCD	; 205
     5aa:	3c ec       	ldi	r19, 0xCC	; 204
     5ac:	4c e1       	ldi	r20, 0x1C	; 28
     5ae:	51 e4       	ldi	r21, 0x41	; 65
     5b0:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     5b4:	9b 01       	movw	r18, r22
     5b6:	ac 01       	movw	r20, r24
     5b8:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	58 e3       	ldi	r21, 0x38	; 56
     5c4:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     5c8:	6b 01       	movw	r12, r22
     5ca:	7c 01       	movw	r14, r24
	accelZ = accel_buff[2]*9.8*2/32768;
     5cc:	6d 81       	ldd	r22, Y+5	; 0x05
     5ce:	7e 81       	ldd	r23, Y+6	; 0x06
     5d0:	07 2e       	mov	r0, r23
     5d2:	00 0c       	add	r0, r0
     5d4:	88 0b       	sbc	r24, r24
     5d6:	99 0b       	sbc	r25, r25
     5d8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
     5dc:	2d ec       	ldi	r18, 0xCD	; 205
     5de:	3c ec       	ldi	r19, 0xCC	; 204
     5e0:	4c e1       	ldi	r20, 0x1C	; 28
     5e2:	51 e4       	ldi	r21, 0x41	; 65
     5e4:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     5e8:	9b 01       	movw	r18, r22
     5ea:	ac 01       	movw	r20, r24
     5ec:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	58 e3       	ldi	r21, 0x38	; 56
     5f8:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     5fc:	4b 01       	movw	r8, r22
     5fe:	5c 01       	movw	r10, r24
	gyroX = gyro_buff[0]*(3.14159/180)/1000/32768;
	gyroY = gyro_buff[1]*(3.14159/180)/1000/32768;
	gyroZ = gyro_buff[2]*(3.14159/180)/1000/32768;

	// estimation
	phi_est = phi_prev + dt*(gyroX - biasX);
     600:	4d 84       	ldd	r4, Y+13	; 0x0d
     602:	5e 84       	ldd	r5, Y+14	; 0x0e
     604:	6f 84       	ldd	r6, Y+15	; 0x0f
     606:	78 88       	ldd	r7, Y+16	; 0x10
	theta_est = theta_prev + dt*(gyroY - biasY);
	Pp = P+Q;
     608:	2f e6       	ldi	r18, 0x6F	; 111
     60a:	32 e1       	ldi	r19, 0x12	; 18
     60c:	43 e8       	ldi	r20, 0x83	; 131
     60e:	5a e3       	ldi	r21, 0x3A	; 58
     610:	69 89       	ldd	r22, Y+17	; 0x11
     612:	7a 89       	ldd	r23, Y+18	; 0x12
     614:	8b 89       	ldd	r24, Y+19	; 0x13
     616:	9c 89       	ldd	r25, Y+20	; 0x14
     618:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     61c:	69 8b       	std	Y+17, r22	; 0x11
     61e:	7a 8b       	std	Y+18, r23	; 0x12
     620:	8b 8b       	std	Y+19, r24	; 0x13
     622:	9c 8b       	std	Y+20, r25	; 0x14

	// innovation
	phi_accel = atan2(accelY, accelZ); // row
     624:	a5 01       	movw	r20, r10
     626:	94 01       	movw	r18, r8
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	0e 94 ab 05 	call	0xb56	; 0xb56 <atan2>
     630:	6d 8f       	std	Y+29, r22	; 0x1d
     632:	7e 8f       	std	Y+30, r23	; 0x1e
     634:	8f 8f       	std	Y+31, r24	; 0x1f
     636:	98 a3       	std	Y+32, r25	; 0x20
	phi_innov = phi_accel - phi_est;
	theta_accel = atan2(-accelX, sqrt(accelY*accelY+accelZ*accelZ)); // pitch
     638:	a7 01       	movw	r20, r14
     63a:	96 01       	movw	r18, r12
     63c:	c7 01       	movw	r24, r14
     63e:	b6 01       	movw	r22, r12
     640:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     644:	69 a3       	std	Y+33, r22	; 0x21
     646:	7a a3       	std	Y+34, r23	; 0x22
     648:	8b a3       	std	Y+35, r24	; 0x23
     64a:	9c a3       	std	Y+36, r25	; 0x24
     64c:	a7 01       	movw	r20, r14
     64e:	96 01       	movw	r18, r12
     650:	c7 01       	movw	r24, r14
     652:	b6 01       	movw	r22, r12
     654:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     658:	6b 01       	movw	r12, r22
     65a:	7c 01       	movw	r14, r24
     65c:	a5 01       	movw	r20, r10
     65e:	94 01       	movw	r18, r8
     660:	c5 01       	movw	r24, r10
     662:	b4 01       	movw	r22, r8
     664:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     674:	0e 94 db 07 	call	0xfb6	; 0xfb6 <sqrt>
     678:	6b 01       	movw	r12, r22
     67a:	7c 01       	movw	r14, r24
     67c:	69 81       	ldd	r22, Y+1	; 0x01
     67e:	7a 81       	ldd	r23, Y+2	; 0x02
     680:	07 2e       	mov	r0, r23
     682:	00 0c       	add	r0, r0
     684:	88 0b       	sbc	r24, r24
     686:	99 0b       	sbc	r25, r25
     688:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
     68c:	2d ec       	ldi	r18, 0xCD	; 205
     68e:	3c ec       	ldi	r19, 0xCC	; 204
     690:	4c e1       	ldi	r20, 0x1C	; 28
     692:	51 e4       	ldi	r21, 0x41	; 65
     694:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     698:	9b 01       	movw	r18, r22
     69a:	ac 01       	movw	r20, r24
     69c:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	58 e3       	ldi	r21, 0x38	; 56
     6a8:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     6ac:	90 58       	subi	r25, 0x80	; 128
     6ae:	a7 01       	movw	r20, r14
     6b0:	96 01       	movw	r18, r12
     6b2:	0e 94 ab 05 	call	0xb56	; 0xb56 <atan2>
     6b6:	4b 01       	movw	r8, r22
     6b8:	5c 01       	movw	r10, r24
	theta_innov = theta_accel - theta_est;

	// Kalman gain
	K = Pp/(Pp+R);
     6ba:	2f e8       	ldi	r18, 0x8F	; 143
     6bc:	32 ec       	ldi	r19, 0xC2	; 194
     6be:	45 ef       	ldi	r20, 0xF5	; 245
     6c0:	5c e3       	ldi	r21, 0x3C	; 60
     6c2:	69 89       	ldd	r22, Y+17	; 0x11
     6c4:	7a 89       	ldd	r23, Y+18	; 0x12
     6c6:	8b 89       	ldd	r24, Y+19	; 0x13
     6c8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ca:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	69 89       	ldd	r22, Y+17	; 0x11
     6d4:	7a 89       	ldd	r23, Y+18	; 0x12
     6d6:	8b 89       	ldd	r24, Y+19	; 0x13
     6d8:	9c 89       	ldd	r25, Y+20	; 0x14
     6da:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
     6de:	6b 01       	movw	r12, r22
     6e0:	7c 01       	movw	r14, r24

	// correction
	phi_prev = phi_prev + K*phi_innov;
     6e2:	6f 81       	ldd	r22, Y+7	; 0x07
     6e4:	78 85       	ldd	r23, Y+8	; 0x08
     6e6:	07 2e       	mov	r0, r23
     6e8:	00 0c       	add	r0, r0
     6ea:	88 0b       	sbc	r24, r24
     6ec:	99 0b       	sbc	r25, r25
     6ee:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
     6f2:	2e e2       	ldi	r18, 0x2E	; 46
     6f4:	3a ef       	ldi	r19, 0xFA	; 250
     6f6:	4e e8       	ldi	r20, 0x8E	; 142
     6f8:	5c e3       	ldi	r21, 0x3C	; 60
     6fa:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	58 e3       	ldi	r21, 0x38	; 56
     712:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     716:	2d a1       	ldd	r18, Y+37	; 0x25
     718:	3e a1       	ldd	r19, Y+38	; 0x26
     71a:	4f a1       	ldd	r20, Y+39	; 0x27
     71c:	58 a5       	ldd	r21, Y+40	; 0x28
     71e:	0e 94 2b 05 	call	0xa56	; 0xa56 <__subsf3>
     722:	a3 01       	movw	r20, r6
     724:	92 01       	movw	r18, r4
     726:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     72a:	2d 89       	ldd	r18, Y+21	; 0x15
     72c:	3e 89       	ldd	r19, Y+22	; 0x16
     72e:	4f 89       	ldd	r20, Y+23	; 0x17
     730:	58 8d       	ldd	r21, Y+24	; 0x18
     732:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     73c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     73e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     740:	98 a1       	ldd	r25, Y+32	; 0x20
     742:	0e 94 2b 05 	call	0xa56	; 0xa56 <__subsf3>
     746:	a7 01       	movw	r20, r14
     748:	96 01       	movw	r18, r12
     74a:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	6d 89       	ldd	r22, Y+21	; 0x15
     754:	7e 89       	ldd	r23, Y+22	; 0x16
     756:	8f 89       	ldd	r24, Y+23	; 0x17
     758:	98 8d       	ldd	r25, Y+24	; 0x18
     75a:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     75e:	6d 8b       	std	Y+21, r22	; 0x15
     760:	7e 8b       	std	Y+22, r23	; 0x16
     762:	8f 8b       	std	Y+23, r24	; 0x17
     764:	98 8f       	std	Y+24, r25	; 0x18
	theta_prev = theta_prev + K*theta_innov;
     766:	69 85       	ldd	r22, Y+9	; 0x09
     768:	7a 85       	ldd	r23, Y+10	; 0x0a
     76a:	07 2e       	mov	r0, r23
     76c:	00 0c       	add	r0, r0
     76e:	88 0b       	sbc	r24, r24
     770:	99 0b       	sbc	r25, r25
     772:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
     776:	2e e2       	ldi	r18, 0x2E	; 46
     778:	3a ef       	ldi	r19, 0xFA	; 250
     77a:	4e e8       	ldi	r20, 0x8E	; 142
     77c:	5c e3       	ldi	r21, 0x3C	; 60
     77e:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	4a e7       	ldi	r20, 0x7A	; 122
     788:	54 e4       	ldi	r21, 0x44	; 68
     78a:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	58 e3       	ldi	r21, 0x38	; 56
     796:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     79a:	29 a5       	ldd	r18, Y+41	; 0x29
     79c:	3a a5       	ldd	r19, Y+42	; 0x2a
     79e:	4b a5       	ldd	r20, Y+43	; 0x2b
     7a0:	5c a5       	ldd	r21, Y+44	; 0x2c
     7a2:	0e 94 2b 05 	call	0xa56	; 0xa56 <__subsf3>
     7a6:	a3 01       	movw	r20, r6
     7a8:	92 01       	movw	r18, r4
     7aa:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     7ae:	29 8d       	ldd	r18, Y+25	; 0x19
     7b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     7b2:	4b 8d       	ldd	r20, Y+27	; 0x1b
     7b4:	5c 8d       	ldd	r21, Y+28	; 0x1c
     7b6:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	c5 01       	movw	r24, r10
     7c0:	b4 01       	movw	r22, r8
     7c2:	0e 94 2b 05 	call	0xa56	; 0xa56 <__subsf3>
     7c6:	a7 01       	movw	r20, r14
     7c8:	96 01       	movw	r18, r12
     7ca:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     7ce:	9b 01       	movw	r18, r22
     7d0:	ac 01       	movw	r20, r24
     7d2:	69 8d       	ldd	r22, Y+25	; 0x19
     7d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7da:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3>
     7de:	69 8f       	std	Y+25, r22	; 0x19
     7e0:	7a 8f       	std	Y+26, r23	; 0x1a
     7e2:	8b 8f       	std	Y+27, r24	; 0x1b
     7e4:	9c 8f       	std	Y+28, r25	; 0x1c
	P = (1-K)*Pp;
     7e6:	a7 01       	movw	r20, r14
     7e8:	96 01       	movw	r18, r12
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e8       	ldi	r24, 0x80	; 128
     7f0:	9f e3       	ldi	r25, 0x3F	; 63
     7f2:	0e 94 2b 05 	call	0xa56	; 0xa56 <__subsf3>
     7f6:	29 89       	ldd	r18, Y+17	; 0x11
     7f8:	3a 89       	ldd	r19, Y+18	; 0x12
     7fa:	4b 89       	ldd	r20, Y+19	; 0x13
     7fc:	5c 89       	ldd	r21, Y+20	; 0x14
     7fe:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3>
     802:	69 8b       	std	Y+17, r22	; 0x11
     804:	7a 8b       	std	Y+18, r23	; 0x12
     806:	8b 8b       	std	Y+19, r24	; 0x13
     808:	9c 8b       	std	Y+20, r25	; 0x14

	
}

void uart_putchar(char data) {
	UDR0 = data;                  // Display character on serial (i.e., PuTTY) terminal
     80a:	f1 01       	movw	r30, r2
     80c:	10 83       	st	Z, r17
     80e:	ff ef       	ldi	r31, 0xFF	; 255
     810:	23 ec       	ldi	r18, 0xC3	; 195
     812:	89 e0       	ldi	r24, 0x09	; 9
     814:	f1 50       	subi	r31, 0x01	; 1
     816:	20 40       	sbci	r18, 0x00	; 0
     818:	80 40       	sbci	r24, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <__LOCK_REGION_LENGTH__+0x414>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
     81e:	00 00       	nop
     820:	ef e1       	ldi	r30, 0x1F	; 31
     822:	fe e4       	ldi	r31, 0x4E	; 78
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
     828:	00 c0       	rjmp	.+0      	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
     82a:	00 00       	nop
	theta_prev = theta_prev + K*theta_innov;
	P = (1-K)*Pp;
	
	uart_putchar('\n');
	_delay_ms(10);
	uart_putchar(phi_prev); //phi, row
     82c:	6d 89       	ldd	r22, Y+21	; 0x15
     82e:	7e 89       	ldd	r23, Y+22	; 0x16
     830:	8f 89       	ldd	r24, Y+23	; 0x17
     832:	98 8d       	ldd	r25, Y+24	; 0x18
     834:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>

	
}

void uart_putchar(char data) {
	UDR0 = data;                  // Display character on serial (i.e., PuTTY) terminal
     838:	f1 01       	movw	r30, r2
     83a:	60 83       	st	Z, r22
     83c:	ff ef       	ldi	r31, 0xFF	; 255
     83e:	23 ec       	ldi	r18, 0xC3	; 195
     840:	89 e0       	ldi	r24, 0x09	; 9
     842:	f1 50       	subi	r31, 0x01	; 1
     844:	20 40       	sbci	r18, 0x00	; 0
     846:	80 40       	sbci	r24, 0x00	; 0
     848:	e1 f7       	brne	.-8      	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
     84c:	00 00       	nop
	P = (1-K)*Pp;
	
	uart_putchar('\n');
	_delay_ms(10);
	uart_putchar(phi_prev); //phi, row
	uart_putdouble(theta_prev); //theta, pitch	
     84e:	69 8d       	ldd	r22, Y+25	; 0x19
     850:	7a 8d       	ldd	r23, Y+26	; 0x1a
     852:	8b 8d       	ldd	r24, Y+27	; 0x1b
     854:	9c 8d       	ldd	r25, Y+28	; 0x1c
     856:	0e 94 bb 01 	call	0x376	; 0x376 <uart_putdouble>
	uart_putdouble(dt);
     85a:	6d 85       	ldd	r22, Y+13	; 0x0d
     85c:	7e 85       	ldd	r23, Y+14	; 0x0e
     85e:	8f 85       	ldd	r24, Y+15	; 0x0f
     860:	98 89       	ldd	r25, Y+16	; 0x10
     862:	0e 94 bb 01 	call	0x376	; 0x376 <uart_putdouble>
     866:	8c ce       	rjmp	.-744    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>

00000868 <mpu6050_init>:

//configure important settings in mpu6050
//subject to change app(ilcation) by app
void mpu6050_init(void){
	
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 0x00); //exit sleep mode
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	6b e6       	ldi	r22, 0x6B	; 107
     86c:	82 ed       	ldi	r24, 0xD2	; 210
     86e:	0e 94 03 01 	call	0x206	; 0x206 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_CONFIG, 0x01); // LPF, bandwidth = 184(accel) and 188(gyro)
     872:	41 e0       	ldi	r20, 0x01	; 1
     874:	6a e1       	ldi	r22, 0x1A	; 26
     876:	82 ed       	ldi	r24, 0xD2	; 210
     878:	0e 94 03 01 	call	0x206	; 0x206 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1<<4); // gyro ADC scale: 1000 deg/s
     87c:	40 e1       	ldi	r20, 0x10	; 16
     87e:	6b e1       	ldi	r22, 0x1B	; 27
     880:	82 ed       	ldi	r24, 0xD2	; 210
     882:	0e 94 03 01 	call	0x206	; 0x206 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 0x00); //accel ADC scale: 2 g
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	6c e1       	ldi	r22, 0x1C	; 28
     88a:	82 ed       	ldi	r24, 0xD2	; 210
     88c:	0e 94 03 01 	call	0x206	; 0x206 <i2c_write_byte>
	
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 0x00); //enable data ready interrupt
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	68 e3       	ldi	r22, 0x38	; 56
     894:	82 ed       	ldi	r24, 0xD2	; 210
     896:	0e 94 03 01 	call	0x206	; 0x206 <i2c_write_byte>
	i2c_write_byte(MPU6050_ADDRESS, MPU6050_RA_SIGNAL_PATH_RESET, 0x00); //don't reset signal path
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	68 e6       	ldi	r22, 0x68	; 104
     89e:	82 ed       	ldi	r24, 0xD2	; 210
     8a0:	0e 94 03 01 	call	0x206	; 0x206 <i2c_write_byte>
     8a4:	08 95       	ret

000008a6 <mpu6050_read_gyro_X>:

	
//read gyro X, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_X(uint8_t * buff){
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, buff);
     8ac:	ac 01       	movw	r20, r24
     8ae:	63 e4       	ldi	r22, 0x43	; 67
     8b0:	82 ed       	ldi	r24, 0xD2	; 210
     8b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, buff+1);
     8b6:	ae 01       	movw	r20, r28
     8b8:	4f 5f       	subi	r20, 0xFF	; 255
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	64 e4       	ldi	r22, 0x44	; 68
     8be:	82 ed       	ldi	r24, 0xD2	; 210
     8c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <mpu6050_read_gyro_Y>:

//read gyro Y, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_Y(uint8_t * buff){
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, buff);
     8d0:	ac 01       	movw	r20, r24
     8d2:	65 e4       	ldi	r22, 0x45	; 69
     8d4:	82 ed       	ldi	r24, 0xD2	; 210
     8d6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, buff+1);
     8da:	ae 01       	movw	r20, r28
     8dc:	4f 5f       	subi	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	66 e4       	ldi	r22, 0x46	; 70
     8e2:	82 ed       	ldi	r24, 0xD2	; 210
     8e4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <mpu6050_read_gyro_Z>:

//read gyro Z, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_gyro_Z(uint8_t * buff){
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, buff);
     8f4:	ac 01       	movw	r20, r24
     8f6:	67 e4       	ldi	r22, 0x47	; 71
     8f8:	82 ed       	ldi	r24, 0xD2	; 210
     8fa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, buff+1);
     8fe:	ae 01       	movw	r20, r28
     900:	4f 5f       	subi	r20, 0xFF	; 255
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	68 e4       	ldi	r22, 0x48	; 72
     906:	82 ed       	ldi	r24, 0xD2	; 210
     908:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <mpu6050_read_gyro_ALL>:

// read gyro X, Y, Z all at once, high- & low-8-bits combined
// return int16_t (signed) in buff
//buff must have at least 3 available places
//no error handling for too small buff
void mpu6050_read_gyro_ALL(int16_t * buff){
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	00 d0       	rcall	.+0      	; 0x91c <mpu6050_read_gyro_ALL+0xa>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	8c 01       	movw	r16, r24
	
	uint8_t tmp[2];

	mpu6050_read_gyro_X(tmp);
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 53 04 	call	0x8a6	; 0x8a6 <mpu6050_read_gyro_X>
	buff[0] = (tmp[0]<<8)|(tmp[1]);
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	98 2f       	mov	r25, r24
     930:	88 27       	eor	r24, r24
     932:	2a 81       	ldd	r18, Y+2	; 0x02
     934:	82 2b       	or	r24, r18
     936:	f8 01       	movw	r30, r16
     938:	91 83       	std	Z+1, r25	; 0x01
     93a:	80 83       	st	Z, r24
	mpu6050_read_gyro_Y(tmp);
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 65 04 	call	0x8ca	; 0x8ca <mpu6050_read_gyro_Y>
	buff[1] = (tmp[0]<<8)|(tmp[1]);
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	98 2f       	mov	r25, r24
     94a:	88 27       	eor	r24, r24
     94c:	2a 81       	ldd	r18, Y+2	; 0x02
     94e:	82 2b       	or	r24, r18
     950:	f8 01       	movw	r30, r16
     952:	93 83       	std	Z+3, r25	; 0x03
     954:	82 83       	std	Z+2, r24	; 0x02
	mpu6050_read_gyro_Z(tmp);
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 77 04 	call	0x8ee	; 0x8ee <mpu6050_read_gyro_Z>
	buff[2] = (tmp[0]<<8)|(tmp[1]);
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	98 2f       	mov	r25, r24
     964:	88 27       	eor	r24, r24
     966:	2a 81       	ldd	r18, Y+2	; 0x02
     968:	82 2b       	or	r24, r18
     96a:	f8 01       	movw	r30, r16
     96c:	95 83       	std	Z+5, r25	; 0x05
     96e:	84 83       	std	Z+4, r24	; 0x04
}
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	08 95       	ret

0000097e <mpu6050_read_accel_X>:


//read accel X, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_X(uint8_t * buff){
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, buff);
     984:	ac 01       	movw	r20, r24
     986:	6b e3       	ldi	r22, 0x3B	; 59
     988:	82 ed       	ldi	r24, 0xD2	; 210
     98a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, buff+1);
     98e:	ae 01       	movw	r20, r28
     990:	4f 5f       	subi	r20, 0xFF	; 255
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	6c e3       	ldi	r22, 0x3C	; 60
     996:	82 ed       	ldi	r24, 0xD2	; 210
     998:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <mpu6050_read_accel_Y>:

//read accel Y, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_Y(uint8_t * buff){
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, buff);
     9a8:	ac 01       	movw	r20, r24
     9aa:	6d e3       	ldi	r22, 0x3D	; 61
     9ac:	82 ed       	ldi	r24, 0xD2	; 210
     9ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, buff+1);
     9b2:	ae 01       	movw	r20, r28
     9b4:	4f 5f       	subi	r20, 0xFF	; 255
     9b6:	5f 4f       	sbci	r21, 0xFF	; 255
     9b8:	6e e3       	ldi	r22, 0x3E	; 62
     9ba:	82 ed       	ldi	r24, 0xD2	; 210
     9bc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <mpu6050_read_accel_Z>:

//read accel Z, high- & low-8-bits separated, high first
//buff must have at least 2 available places
//no error handling for too small buff
void mpu6050_read_accel_Z(uint8_t * buff){
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	ec 01       	movw	r28, r24

	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, buff);
     9cc:	ac 01       	movw	r20, r24
     9ce:	6f e3       	ldi	r22, 0x3F	; 63
     9d0:	82 ed       	ldi	r24, 0xD2	; 210
     9d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
	i2c_read_byte(MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, buff+1);
     9d6:	ae 01       	movw	r20, r28
     9d8:	4f 5f       	subi	r20, 0xFF	; 255
     9da:	5f 4f       	sbci	r21, 0xFF	; 255
     9dc:	60 e4       	ldi	r22, 0x40	; 64
     9de:	82 ed       	ldi	r24, 0xD2	; 210
     9e0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <i2c_read_byte>
}
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <mpu6050_read_accel_ALL>:

// read accel X, Y, Z all at once, high- & low-8-bits combined
// return int16_t (signed) in buff
//buff must have at least 3 available places
//no error handling for too small buff
void mpu6050_read_accel_ALL(int16_t * buff){
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <mpu6050_read_accel_ALL+0xa>
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	8c 01       	movw	r16, r24
	
	uint8_t tmp[2];

	mpu6050_read_accel_X(tmp);
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	0e 94 bf 04 	call	0x97e	; 0x97e <mpu6050_read_accel_X>
	buff[0] = (tmp[0]<<8)|(tmp[1]);
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	98 2f       	mov	r25, r24
     a08:	88 27       	eor	r24, r24
     a0a:	2a 81       	ldd	r18, Y+2	; 0x02
     a0c:	82 2b       	or	r24, r18
     a0e:	f8 01       	movw	r30, r16
     a10:	91 83       	std	Z+1, r25	; 0x01
     a12:	80 83       	st	Z, r24
	mpu6050_read_accel_Y(tmp);
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <mpu6050_read_accel_Y>
	buff[1] = (tmp[0]<<8)|(tmp[1]);
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	98 2f       	mov	r25, r24
     a22:	88 27       	eor	r24, r24
     a24:	2a 81       	ldd	r18, Y+2	; 0x02
     a26:	82 2b       	or	r24, r18
     a28:	f8 01       	movw	r30, r16
     a2a:	93 83       	std	Z+3, r25	; 0x03
     a2c:	82 83       	std	Z+2, r24	; 0x02
	mpu6050_read_accel_Z(tmp);
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <mpu6050_read_accel_Z>
	buff[2] = (tmp[0]<<8)|(tmp[1]);
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	98 2f       	mov	r25, r24
     a3c:	88 27       	eor	r24, r24
     a3e:	2a 81       	ldd	r18, Y+2	; 0x02
     a40:	82 2b       	or	r24, r18
     a42:	f8 01       	movw	r30, r16
     a44:	95 83       	std	Z+5, r25	; 0x05
     a46:	84 83       	std	Z+4, r24	; 0x04
}
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <__subsf3>:
     a56:	50 58       	subi	r21, 0x80	; 128

00000a58 <__addsf3>:
     a58:	bb 27       	eor	r27, r27
     a5a:	aa 27       	eor	r26, r26
     a5c:	0e 94 43 05 	call	0xa86	; 0xa86 <__addsf3x>
     a60:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_round>
     a64:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_pscA>
     a68:	38 f0       	brcs	.+14     	; 0xa78 <__addsf3+0x20>
     a6a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscB>
     a6e:	20 f0       	brcs	.+8      	; 0xa78 <__addsf3+0x20>
     a70:	39 f4       	brne	.+14     	; 0xa80 <__addsf3+0x28>
     a72:	9f 3f       	cpi	r25, 0xFF	; 255
     a74:	19 f4       	brne	.+6      	; 0xa7c <__addsf3+0x24>
     a76:	26 f4       	brtc	.+8      	; 0xa80 <__addsf3+0x28>
     a78:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
     a7c:	0e f4       	brtc	.+2      	; 0xa80 <__addsf3+0x28>
     a7e:	e0 95       	com	r30
     a80:	e7 fb       	bst	r30, 7
     a82:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>

00000a86 <__addsf3x>:
     a86:	e9 2f       	mov	r30, r25
     a88:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_split3>
     a8c:	58 f3       	brcs	.-42     	; 0xa64 <__addsf3+0xc>
     a8e:	ba 17       	cp	r27, r26
     a90:	62 07       	cpc	r22, r18
     a92:	73 07       	cpc	r23, r19
     a94:	84 07       	cpc	r24, r20
     a96:	95 07       	cpc	r25, r21
     a98:	20 f0       	brcs	.+8      	; 0xaa2 <__addsf3x+0x1c>
     a9a:	79 f4       	brne	.+30     	; 0xaba <__addsf3x+0x34>
     a9c:	a6 f5       	brtc	.+104    	; 0xb06 <__addsf3x+0x80>
     a9e:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_zero>
     aa2:	0e f4       	brtc	.+2      	; 0xaa6 <__addsf3x+0x20>
     aa4:	e0 95       	com	r30
     aa6:	0b 2e       	mov	r0, r27
     aa8:	ba 2f       	mov	r27, r26
     aaa:	a0 2d       	mov	r26, r0
     aac:	0b 01       	movw	r0, r22
     aae:	b9 01       	movw	r22, r18
     ab0:	90 01       	movw	r18, r0
     ab2:	0c 01       	movw	r0, r24
     ab4:	ca 01       	movw	r24, r20
     ab6:	a0 01       	movw	r20, r0
     ab8:	11 24       	eor	r1, r1
     aba:	ff 27       	eor	r31, r31
     abc:	59 1b       	sub	r21, r25
     abe:	99 f0       	breq	.+38     	; 0xae6 <__addsf3x+0x60>
     ac0:	59 3f       	cpi	r21, 0xF9	; 249
     ac2:	50 f4       	brcc	.+20     	; 0xad8 <__addsf3x+0x52>
     ac4:	50 3e       	cpi	r21, 0xE0	; 224
     ac6:	68 f1       	brcs	.+90     	; 0xb22 <__addsf3x+0x9c>
     ac8:	1a 16       	cp	r1, r26
     aca:	f0 40       	sbci	r31, 0x00	; 0
     acc:	a2 2f       	mov	r26, r18
     ace:	23 2f       	mov	r18, r19
     ad0:	34 2f       	mov	r19, r20
     ad2:	44 27       	eor	r20, r20
     ad4:	58 5f       	subi	r21, 0xF8	; 248
     ad6:	f3 cf       	rjmp	.-26     	; 0xabe <__addsf3x+0x38>
     ad8:	46 95       	lsr	r20
     ada:	37 95       	ror	r19
     adc:	27 95       	ror	r18
     ade:	a7 95       	ror	r26
     ae0:	f0 40       	sbci	r31, 0x00	; 0
     ae2:	53 95       	inc	r21
     ae4:	c9 f7       	brne	.-14     	; 0xad8 <__addsf3x+0x52>
     ae6:	7e f4       	brtc	.+30     	; 0xb06 <__addsf3x+0x80>
     ae8:	1f 16       	cp	r1, r31
     aea:	ba 0b       	sbc	r27, r26
     aec:	62 0b       	sbc	r22, r18
     aee:	73 0b       	sbc	r23, r19
     af0:	84 0b       	sbc	r24, r20
     af2:	ba f0       	brmi	.+46     	; 0xb22 <__addsf3x+0x9c>
     af4:	91 50       	subi	r25, 0x01	; 1
     af6:	a1 f0       	breq	.+40     	; 0xb20 <__addsf3x+0x9a>
     af8:	ff 0f       	add	r31, r31
     afa:	bb 1f       	adc	r27, r27
     afc:	66 1f       	adc	r22, r22
     afe:	77 1f       	adc	r23, r23
     b00:	88 1f       	adc	r24, r24
     b02:	c2 f7       	brpl	.-16     	; 0xaf4 <__addsf3x+0x6e>
     b04:	0e c0       	rjmp	.+28     	; 0xb22 <__addsf3x+0x9c>
     b06:	ba 0f       	add	r27, r26
     b08:	62 1f       	adc	r22, r18
     b0a:	73 1f       	adc	r23, r19
     b0c:	84 1f       	adc	r24, r20
     b0e:	48 f4       	brcc	.+18     	; 0xb22 <__addsf3x+0x9c>
     b10:	87 95       	ror	r24
     b12:	77 95       	ror	r23
     b14:	67 95       	ror	r22
     b16:	b7 95       	ror	r27
     b18:	f7 95       	ror	r31
     b1a:	9e 3f       	cpi	r25, 0xFE	; 254
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <__addsf3x+0x9a>
     b1e:	b0 cf       	rjmp	.-160    	; 0xa80 <__addsf3+0x28>
     b20:	93 95       	inc	r25
     b22:	88 0f       	add	r24, r24
     b24:	08 f0       	brcs	.+2      	; 0xb28 <__addsf3x+0xa2>
     b26:	99 27       	eor	r25, r25
     b28:	ee 0f       	add	r30, r30
     b2a:	97 95       	ror	r25
     b2c:	87 95       	ror	r24
     b2e:	08 95       	ret
     b30:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_pscA>
     b34:	60 f0       	brcs	.+24     	; 0xb4e <__addsf3x+0xc8>
     b36:	80 e8       	ldi	r24, 0x80	; 128
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	09 f4       	brne	.+2      	; 0xb3e <__addsf3x+0xb8>
     b3c:	9e ef       	ldi	r25, 0xFE	; 254
     b3e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscB>
     b42:	28 f0       	brcs	.+10     	; 0xb4e <__addsf3x+0xc8>
     b44:	40 e8       	ldi	r20, 0x80	; 128
     b46:	51 e0       	ldi	r21, 0x01	; 1
     b48:	71 f4       	brne	.+28     	; 0xb66 <atan2+0x10>
     b4a:	5e ef       	ldi	r21, 0xFE	; 254
     b4c:	0c c0       	rjmp	.+24     	; 0xb66 <atan2+0x10>
     b4e:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
     b52:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_zero>

00000b56 <atan2>:
     b56:	e9 2f       	mov	r30, r25
     b58:	e0 78       	andi	r30, 0x80	; 128
     b5a:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_split3>
     b5e:	40 f3       	brcs	.-48     	; 0xb30 <__addsf3x+0xaa>
     b60:	09 2e       	mov	r0, r25
     b62:	05 2a       	or	r0, r21
     b64:	b1 f3       	breq	.-20     	; 0xb52 <__addsf3x+0xcc>
     b66:	26 17       	cp	r18, r22
     b68:	37 07       	cpc	r19, r23
     b6a:	48 07       	cpc	r20, r24
     b6c:	59 07       	cpc	r21, r25
     b6e:	38 f0       	brcs	.+14     	; 0xb7e <atan2+0x28>
     b70:	0e 2e       	mov	r0, r30
     b72:	07 f8       	bld	r0, 7
     b74:	e0 25       	eor	r30, r0
     b76:	69 f0       	breq	.+26     	; 0xb92 <atan2+0x3c>
     b78:	e0 25       	eor	r30, r0
     b7a:	e0 64       	ori	r30, 0x40	; 64
     b7c:	0a c0       	rjmp	.+20     	; 0xb92 <atan2+0x3c>
     b7e:	ef 63       	ori	r30, 0x3F	; 63
     b80:	07 f8       	bld	r0, 7
     b82:	00 94       	com	r0
     b84:	07 fa       	bst	r0, 7
     b86:	db 01       	movw	r26, r22
     b88:	b9 01       	movw	r22, r18
     b8a:	9d 01       	movw	r18, r26
     b8c:	dc 01       	movw	r26, r24
     b8e:	ca 01       	movw	r24, r20
     b90:	ad 01       	movw	r20, r26
     b92:	ef 93       	push	r30
     b94:	0e 94 21 06 	call	0xc42	; 0xc42 <__divsf3_pse>
     b98:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_round>
     b9c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <atan>
     ba0:	5f 91       	pop	r21
     ba2:	55 23       	and	r21, r21
     ba4:	39 f0       	breq	.+14     	; 0xbb4 <atan2+0x5e>
     ba6:	2b ed       	ldi	r18, 0xDB	; 219
     ba8:	3f e0       	ldi	r19, 0x0F	; 15
     baa:	49 e4       	ldi	r20, 0x49	; 73
     bac:	50 fd       	sbrc	r21, 0
     bae:	49 ec       	ldi	r20, 0xC9	; 201
     bb0:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__addsf3>
     bb4:	08 95       	ret

00000bb6 <atan>:
     bb6:	df 93       	push	r29
     bb8:	dd 27       	eor	r29, r29
     bba:	b9 2f       	mov	r27, r25
     bbc:	bf 77       	andi	r27, 0x7F	; 127
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	16 16       	cp	r1, r22
     bc4:	17 06       	cpc	r1, r23
     bc6:	48 07       	cpc	r20, r24
     bc8:	5b 07       	cpc	r21, r27
     bca:	18 f4       	brcc	.+6      	; 0xbd2 <atan+0x1c>
     bcc:	d9 2f       	mov	r29, r25
     bce:	0e 94 60 07 	call	0xec0	; 0xec0 <inverse>
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	7f 93       	push	r23
     bd8:	6f 93       	push	r22
     bda:	0e 94 1b 08 	call	0x1036	; 0x1036 <square>
     bde:	e8 e6       	ldi	r30, 0x68	; 104
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_powser>
     be6:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_round>
     bea:	2f 91       	pop	r18
     bec:	3f 91       	pop	r19
     bee:	4f 91       	pop	r20
     bf0:	5f 91       	pop	r21
     bf2:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3x>
     bf6:	dd 23       	and	r29, r29
     bf8:	51 f0       	breq	.+20     	; 0xc0e <atan+0x58>
     bfa:	90 58       	subi	r25, 0x80	; 128
     bfc:	a2 ea       	ldi	r26, 0xA2	; 162
     bfe:	2a ed       	ldi	r18, 0xDA	; 218
     c00:	3f e0       	ldi	r19, 0x0F	; 15
     c02:	49 ec       	ldi	r20, 0xC9	; 201
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	d0 78       	andi	r29, 0x80	; 128
     c08:	5d 27       	eor	r21, r29
     c0a:	0e 94 43 05 	call	0xa86	; 0xa86 <__addsf3x>
     c0e:	df 91       	pop	r29
     c10:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_round>

00000c14 <__divsf3>:
     c14:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__divsf3x>
     c18:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_round>
     c1c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscB>
     c20:	58 f0       	brcs	.+22     	; 0xc38 <__divsf3+0x24>
     c22:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_pscA>
     c26:	40 f0       	brcs	.+16     	; 0xc38 <__divsf3+0x24>
     c28:	29 f4       	brne	.+10     	; 0xc34 <__divsf3+0x20>
     c2a:	5f 3f       	cpi	r21, 0xFF	; 255
     c2c:	29 f0       	breq	.+10     	; 0xc38 <__divsf3+0x24>
     c2e:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
     c32:	51 11       	cpse	r21, r1
     c34:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>
     c38:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>

00000c3c <__divsf3x>:
     c3c:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_split3>
     c40:	68 f3       	brcs	.-38     	; 0xc1c <__divsf3+0x8>

00000c42 <__divsf3_pse>:
     c42:	99 23       	and	r25, r25
     c44:	b1 f3       	breq	.-20     	; 0xc32 <__divsf3+0x1e>
     c46:	55 23       	and	r21, r21
     c48:	91 f3       	breq	.-28     	; 0xc2e <__divsf3+0x1a>
     c4a:	95 1b       	sub	r25, r21
     c4c:	55 0b       	sbc	r21, r21
     c4e:	bb 27       	eor	r27, r27
     c50:	aa 27       	eor	r26, r26
     c52:	62 17       	cp	r22, r18
     c54:	73 07       	cpc	r23, r19
     c56:	84 07       	cpc	r24, r20
     c58:	38 f0       	brcs	.+14     	; 0xc68 <__divsf3_pse+0x26>
     c5a:	9f 5f       	subi	r25, 0xFF	; 255
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	44 1f       	adc	r20, r20
     c64:	aa 1f       	adc	r26, r26
     c66:	a9 f3       	breq	.-22     	; 0xc52 <__divsf3_pse+0x10>
     c68:	35 d0       	rcall	.+106    	; 0xcd4 <__divsf3_pse+0x92>
     c6a:	0e 2e       	mov	r0, r30
     c6c:	3a f0       	brmi	.+14     	; 0xc7c <__divsf3_pse+0x3a>
     c6e:	e0 e8       	ldi	r30, 0x80	; 128
     c70:	32 d0       	rcall	.+100    	; 0xcd6 <__divsf3_pse+0x94>
     c72:	91 50       	subi	r25, 0x01	; 1
     c74:	50 40       	sbci	r21, 0x00	; 0
     c76:	e6 95       	lsr	r30
     c78:	00 1c       	adc	r0, r0
     c7a:	ca f7       	brpl	.-14     	; 0xc6e <__divsf3_pse+0x2c>
     c7c:	2b d0       	rcall	.+86     	; 0xcd4 <__divsf3_pse+0x92>
     c7e:	fe 2f       	mov	r31, r30
     c80:	29 d0       	rcall	.+82     	; 0xcd4 <__divsf3_pse+0x92>
     c82:	66 0f       	add	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	88 1f       	adc	r24, r24
     c88:	bb 1f       	adc	r27, r27
     c8a:	26 17       	cp	r18, r22
     c8c:	37 07       	cpc	r19, r23
     c8e:	48 07       	cpc	r20, r24
     c90:	ab 07       	cpc	r26, r27
     c92:	b0 e8       	ldi	r27, 0x80	; 128
     c94:	09 f0       	breq	.+2      	; 0xc98 <__divsf3_pse+0x56>
     c96:	bb 0b       	sbc	r27, r27
     c98:	80 2d       	mov	r24, r0
     c9a:	bf 01       	movw	r22, r30
     c9c:	ff 27       	eor	r31, r31
     c9e:	93 58       	subi	r25, 0x83	; 131
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	3a f0       	brmi	.+14     	; 0xcb2 <__divsf3_pse+0x70>
     ca4:	9e 3f       	cpi	r25, 0xFE	; 254
     ca6:	51 05       	cpc	r21, r1
     ca8:	78 f0       	brcs	.+30     	; 0xcc8 <__divsf3_pse+0x86>
     caa:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
     cae:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>
     cb2:	5f 3f       	cpi	r21, 0xFF	; 255
     cb4:	e4 f3       	brlt	.-8      	; 0xcae <__divsf3_pse+0x6c>
     cb6:	98 3e       	cpi	r25, 0xE8	; 232
     cb8:	d4 f3       	brlt	.-12     	; 0xcae <__divsf3_pse+0x6c>
     cba:	86 95       	lsr	r24
     cbc:	77 95       	ror	r23
     cbe:	67 95       	ror	r22
     cc0:	b7 95       	ror	r27
     cc2:	f7 95       	ror	r31
     cc4:	9f 5f       	subi	r25, 0xFF	; 255
     cc6:	c9 f7       	brne	.-14     	; 0xcba <__divsf3_pse+0x78>
     cc8:	88 0f       	add	r24, r24
     cca:	91 1d       	adc	r25, r1
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	97 f9       	bld	r25, 7
     cd2:	08 95       	ret
     cd4:	e1 e0       	ldi	r30, 0x01	; 1
     cd6:	66 0f       	add	r22, r22
     cd8:	77 1f       	adc	r23, r23
     cda:	88 1f       	adc	r24, r24
     cdc:	bb 1f       	adc	r27, r27
     cde:	62 17       	cp	r22, r18
     ce0:	73 07       	cpc	r23, r19
     ce2:	84 07       	cpc	r24, r20
     ce4:	ba 07       	cpc	r27, r26
     ce6:	20 f0       	brcs	.+8      	; 0xcf0 <__divsf3_pse+0xae>
     ce8:	62 1b       	sub	r22, r18
     cea:	73 0b       	sbc	r23, r19
     cec:	84 0b       	sbc	r24, r20
     cee:	ba 0b       	sbc	r27, r26
     cf0:	ee 1f       	adc	r30, r30
     cf2:	88 f7       	brcc	.-30     	; 0xcd6 <__divsf3_pse+0x94>
     cf4:	e0 95       	com	r30
     cf6:	08 95       	ret

00000cf8 <__fixunssfsi>:
     cf8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_splitA>
     cfc:	88 f0       	brcs	.+34     	; 0xd20 <__fixunssfsi+0x28>
     cfe:	9f 57       	subi	r25, 0x7F	; 127
     d00:	98 f0       	brcs	.+38     	; 0xd28 <__fixunssfsi+0x30>
     d02:	b9 2f       	mov	r27, r25
     d04:	99 27       	eor	r25, r25
     d06:	b7 51       	subi	r27, 0x17	; 23
     d08:	b0 f0       	brcs	.+44     	; 0xd36 <__fixunssfsi+0x3e>
     d0a:	e1 f0       	breq	.+56     	; 0xd44 <__fixunssfsi+0x4c>
     d0c:	66 0f       	add	r22, r22
     d0e:	77 1f       	adc	r23, r23
     d10:	88 1f       	adc	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	1a f0       	brmi	.+6      	; 0xd1c <__fixunssfsi+0x24>
     d16:	ba 95       	dec	r27
     d18:	c9 f7       	brne	.-14     	; 0xd0c <__fixunssfsi+0x14>
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <__fixunssfsi+0x4c>
     d1c:	b1 30       	cpi	r27, 0x01	; 1
     d1e:	91 f0       	breq	.+36     	; 0xd44 <__fixunssfsi+0x4c>
     d20:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fp_zero>
     d24:	b1 e0       	ldi	r27, 0x01	; 1
     d26:	08 95       	ret
     d28:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_zero>
     d2c:	67 2f       	mov	r22, r23
     d2e:	78 2f       	mov	r23, r24
     d30:	88 27       	eor	r24, r24
     d32:	b8 5f       	subi	r27, 0xF8	; 248
     d34:	39 f0       	breq	.+14     	; 0xd44 <__fixunssfsi+0x4c>
     d36:	b9 3f       	cpi	r27, 0xF9	; 249
     d38:	cc f3       	brlt	.-14     	; 0xd2c <__fixunssfsi+0x34>
     d3a:	86 95       	lsr	r24
     d3c:	77 95       	ror	r23
     d3e:	67 95       	ror	r22
     d40:	b3 95       	inc	r27
     d42:	d9 f7       	brne	.-10     	; 0xd3a <__fixunssfsi+0x42>
     d44:	3e f4       	brtc	.+14     	; 0xd54 <__fixunssfsi+0x5c>
     d46:	90 95       	com	r25
     d48:	80 95       	com	r24
     d4a:	70 95       	com	r23
     d4c:	61 95       	neg	r22
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	8f 4f       	sbci	r24, 0xFF	; 255
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	08 95       	ret

00000d56 <__floatunsisf>:
     d56:	e8 94       	clt
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <__floatsisf+0x12>

00000d5a <__floatsisf>:
     d5a:	97 fb       	bst	r25, 7
     d5c:	3e f4       	brtc	.+14     	; 0xd6c <__floatsisf+0x12>
     d5e:	90 95       	com	r25
     d60:	80 95       	com	r24
     d62:	70 95       	com	r23
     d64:	61 95       	neg	r22
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	8f 4f       	sbci	r24, 0xFF	; 255
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	99 23       	and	r25, r25
     d6e:	a9 f0       	breq	.+42     	; 0xd9a <__floatsisf+0x40>
     d70:	f9 2f       	mov	r31, r25
     d72:	96 e9       	ldi	r25, 0x96	; 150
     d74:	bb 27       	eor	r27, r27
     d76:	93 95       	inc	r25
     d78:	f6 95       	lsr	r31
     d7a:	87 95       	ror	r24
     d7c:	77 95       	ror	r23
     d7e:	67 95       	ror	r22
     d80:	b7 95       	ror	r27
     d82:	f1 11       	cpse	r31, r1
     d84:	f8 cf       	rjmp	.-16     	; 0xd76 <__floatsisf+0x1c>
     d86:	fa f4       	brpl	.+62     	; 0xdc6 <__floatsisf+0x6c>
     d88:	bb 0f       	add	r27, r27
     d8a:	11 f4       	brne	.+4      	; 0xd90 <__floatsisf+0x36>
     d8c:	60 ff       	sbrs	r22, 0
     d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <__floatsisf+0x6c>
     d90:	6f 5f       	subi	r22, 0xFF	; 255
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	8f 4f       	sbci	r24, 0xFF	; 255
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	16 c0       	rjmp	.+44     	; 0xdc6 <__floatsisf+0x6c>
     d9a:	88 23       	and	r24, r24
     d9c:	11 f0       	breq	.+4      	; 0xda2 <__floatsisf+0x48>
     d9e:	96 e9       	ldi	r25, 0x96	; 150
     da0:	11 c0       	rjmp	.+34     	; 0xdc4 <__floatsisf+0x6a>
     da2:	77 23       	and	r23, r23
     da4:	21 f0       	breq	.+8      	; 0xdae <__floatsisf+0x54>
     da6:	9e e8       	ldi	r25, 0x8E	; 142
     da8:	87 2f       	mov	r24, r23
     daa:	76 2f       	mov	r23, r22
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <__floatsisf+0x5e>
     dae:	66 23       	and	r22, r22
     db0:	71 f0       	breq	.+28     	; 0xdce <__floatsisf+0x74>
     db2:	96 e8       	ldi	r25, 0x86	; 134
     db4:	86 2f       	mov	r24, r22
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	2a f0       	brmi	.+10     	; 0xdc6 <__floatsisf+0x6c>
     dbc:	9a 95       	dec	r25
     dbe:	66 0f       	add	r22, r22
     dc0:	77 1f       	adc	r23, r23
     dc2:	88 1f       	adc	r24, r24
     dc4:	da f7       	brpl	.-10     	; 0xdbc <__floatsisf+0x62>
     dc6:	88 0f       	add	r24, r24
     dc8:	96 95       	lsr	r25
     dca:	87 95       	ror	r24
     dcc:	97 f9       	bld	r25, 7
     dce:	08 95       	ret

00000dd0 <__fp_inf>:
     dd0:	97 f9       	bld	r25, 7
     dd2:	9f 67       	ori	r25, 0x7F	; 127
     dd4:	80 e8       	ldi	r24, 0x80	; 128
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	08 95       	ret

00000ddc <__fp_nan>:
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	80 ec       	ldi	r24, 0xC0	; 192
     de0:	08 95       	ret

00000de2 <__fp_powser>:
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	1f 93       	push	r17
     de8:	0f 93       	push	r16
     dea:	ff 92       	push	r15
     dec:	ef 92       	push	r14
     dee:	df 92       	push	r13
     df0:	7b 01       	movw	r14, r22
     df2:	8c 01       	movw	r16, r24
     df4:	68 94       	set
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <__fp_powser+0x22>
     df8:	da 2e       	mov	r13, r26
     dfa:	ef 01       	movw	r28, r30
     dfc:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3x>
     e00:	fe 01       	movw	r30, r28
     e02:	e8 94       	clt
     e04:	a5 91       	lpm	r26, Z+
     e06:	25 91       	lpm	r18, Z+
     e08:	35 91       	lpm	r19, Z+
     e0a:	45 91       	lpm	r20, Z+
     e0c:	55 91       	lpm	r21, Z+
     e0e:	a6 f3       	brts	.-24     	; 0xdf8 <__fp_powser+0x16>
     e10:	ef 01       	movw	r28, r30
     e12:	0e 94 43 05 	call	0xa86	; 0xa86 <__addsf3x>
     e16:	fe 01       	movw	r30, r28
     e18:	97 01       	movw	r18, r14
     e1a:	a8 01       	movw	r20, r16
     e1c:	da 94       	dec	r13
     e1e:	69 f7       	brne	.-38     	; 0xdfa <__fp_powser+0x18>
     e20:	df 90       	pop	r13
     e22:	ef 90       	pop	r14
     e24:	ff 90       	pop	r15
     e26:	0f 91       	pop	r16
     e28:	1f 91       	pop	r17
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <__fp_pscA>:
     e30:	00 24       	eor	r0, r0
     e32:	0a 94       	dec	r0
     e34:	16 16       	cp	r1, r22
     e36:	17 06       	cpc	r1, r23
     e38:	18 06       	cpc	r1, r24
     e3a:	09 06       	cpc	r0, r25
     e3c:	08 95       	ret

00000e3e <__fp_pscB>:
     e3e:	00 24       	eor	r0, r0
     e40:	0a 94       	dec	r0
     e42:	12 16       	cp	r1, r18
     e44:	13 06       	cpc	r1, r19
     e46:	14 06       	cpc	r1, r20
     e48:	05 06       	cpc	r0, r21
     e4a:	08 95       	ret

00000e4c <__fp_round>:
     e4c:	09 2e       	mov	r0, r25
     e4e:	03 94       	inc	r0
     e50:	00 0c       	add	r0, r0
     e52:	11 f4       	brne	.+4      	; 0xe58 <__fp_round+0xc>
     e54:	88 23       	and	r24, r24
     e56:	52 f0       	brmi	.+20     	; 0xe6c <__fp_round+0x20>
     e58:	bb 0f       	add	r27, r27
     e5a:	40 f4       	brcc	.+16     	; 0xe6c <__fp_round+0x20>
     e5c:	bf 2b       	or	r27, r31
     e5e:	11 f4       	brne	.+4      	; 0xe64 <__fp_round+0x18>
     e60:	60 ff       	sbrs	r22, 0
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <__fp_round+0x20>
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	08 95       	ret

00000e6e <__fp_split3>:
     e6e:	57 fd       	sbrc	r21, 7
     e70:	90 58       	subi	r25, 0x80	; 128
     e72:	44 0f       	add	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	59 f0       	breq	.+22     	; 0xe8e <__fp_splitA+0x10>
     e78:	5f 3f       	cpi	r21, 0xFF	; 255
     e7a:	71 f0       	breq	.+28     	; 0xe98 <__fp_splitA+0x1a>
     e7c:	47 95       	ror	r20

00000e7e <__fp_splitA>:
     e7e:	88 0f       	add	r24, r24
     e80:	97 fb       	bst	r25, 7
     e82:	99 1f       	adc	r25, r25
     e84:	61 f0       	breq	.+24     	; 0xe9e <__fp_splitA+0x20>
     e86:	9f 3f       	cpi	r25, 0xFF	; 255
     e88:	79 f0       	breq	.+30     	; 0xea8 <__fp_splitA+0x2a>
     e8a:	87 95       	ror	r24
     e8c:	08 95       	ret
     e8e:	12 16       	cp	r1, r18
     e90:	13 06       	cpc	r1, r19
     e92:	14 06       	cpc	r1, r20
     e94:	55 1f       	adc	r21, r21
     e96:	f2 cf       	rjmp	.-28     	; 0xe7c <__fp_split3+0xe>
     e98:	46 95       	lsr	r20
     e9a:	f1 df       	rcall	.-30     	; 0xe7e <__fp_splitA>
     e9c:	08 c0       	rjmp	.+16     	; 0xeae <__fp_splitA+0x30>
     e9e:	16 16       	cp	r1, r22
     ea0:	17 06       	cpc	r1, r23
     ea2:	18 06       	cpc	r1, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	f1 cf       	rjmp	.-30     	; 0xe8a <__fp_splitA+0xc>
     ea8:	86 95       	lsr	r24
     eaa:	71 05       	cpc	r23, r1
     eac:	61 05       	cpc	r22, r1
     eae:	08 94       	sec
     eb0:	08 95       	ret

00000eb2 <__fp_zero>:
     eb2:	e8 94       	clt

00000eb4 <__fp_szero>:
     eb4:	bb 27       	eor	r27, r27
     eb6:	66 27       	eor	r22, r22
     eb8:	77 27       	eor	r23, r23
     eba:	cb 01       	movw	r24, r22
     ebc:	97 f9       	bld	r25, 7
     ebe:	08 95       	ret

00000ec0 <inverse>:
     ec0:	9b 01       	movw	r18, r22
     ec2:	ac 01       	movw	r20, r24
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 e8       	ldi	r24, 0x80	; 128
     eca:	9f e3       	ldi	r25, 0x3F	; 63
     ecc:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__divsf3>

00000ed0 <__mulsf3>:
     ed0:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3x>
     ed4:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_round>
     ed8:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_pscA>
     edc:	38 f0       	brcs	.+14     	; 0xeec <__mulsf3+0x1c>
     ede:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_pscB>
     ee2:	20 f0       	brcs	.+8      	; 0xeec <__mulsf3+0x1c>
     ee4:	95 23       	and	r25, r21
     ee6:	11 f0       	breq	.+4      	; 0xeec <__mulsf3+0x1c>
     ee8:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
     eec:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
     ef0:	11 24       	eor	r1, r1
     ef2:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>

00000ef6 <__mulsf3x>:
     ef6:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_split3>
     efa:	70 f3       	brcs	.-36     	; 0xed8 <__mulsf3+0x8>

00000efc <__mulsf3_pse>:
     efc:	95 9f       	mul	r25, r21
     efe:	c1 f3       	breq	.-16     	; 0xef0 <__mulsf3+0x20>
     f00:	95 0f       	add	r25, r21
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	55 1f       	adc	r21, r21
     f06:	62 9f       	mul	r22, r18
     f08:	f0 01       	movw	r30, r0
     f0a:	72 9f       	mul	r23, r18
     f0c:	bb 27       	eor	r27, r27
     f0e:	f0 0d       	add	r31, r0
     f10:	b1 1d       	adc	r27, r1
     f12:	63 9f       	mul	r22, r19
     f14:	aa 27       	eor	r26, r26
     f16:	f0 0d       	add	r31, r0
     f18:	b1 1d       	adc	r27, r1
     f1a:	aa 1f       	adc	r26, r26
     f1c:	64 9f       	mul	r22, r20
     f1e:	66 27       	eor	r22, r22
     f20:	b0 0d       	add	r27, r0
     f22:	a1 1d       	adc	r26, r1
     f24:	66 1f       	adc	r22, r22
     f26:	82 9f       	mul	r24, r18
     f28:	22 27       	eor	r18, r18
     f2a:	b0 0d       	add	r27, r0
     f2c:	a1 1d       	adc	r26, r1
     f2e:	62 1f       	adc	r22, r18
     f30:	73 9f       	mul	r23, r19
     f32:	b0 0d       	add	r27, r0
     f34:	a1 1d       	adc	r26, r1
     f36:	62 1f       	adc	r22, r18
     f38:	83 9f       	mul	r24, r19
     f3a:	a0 0d       	add	r26, r0
     f3c:	61 1d       	adc	r22, r1
     f3e:	22 1f       	adc	r18, r18
     f40:	74 9f       	mul	r23, r20
     f42:	33 27       	eor	r19, r19
     f44:	a0 0d       	add	r26, r0
     f46:	61 1d       	adc	r22, r1
     f48:	23 1f       	adc	r18, r19
     f4a:	84 9f       	mul	r24, r20
     f4c:	60 0d       	add	r22, r0
     f4e:	21 1d       	adc	r18, r1
     f50:	82 2f       	mov	r24, r18
     f52:	76 2f       	mov	r23, r22
     f54:	6a 2f       	mov	r22, r26
     f56:	11 24       	eor	r1, r1
     f58:	9f 57       	subi	r25, 0x7F	; 127
     f5a:	50 40       	sbci	r21, 0x00	; 0
     f5c:	9a f0       	brmi	.+38     	; 0xf84 <__mulsf3_pse+0x88>
     f5e:	f1 f0       	breq	.+60     	; 0xf9c <__mulsf3_pse+0xa0>
     f60:	88 23       	and	r24, r24
     f62:	4a f0       	brmi	.+18     	; 0xf76 <__mulsf3_pse+0x7a>
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	bb 1f       	adc	r27, r27
     f6a:	66 1f       	adc	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	88 1f       	adc	r24, r24
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	50 40       	sbci	r21, 0x00	; 0
     f74:	a9 f7       	brne	.-22     	; 0xf60 <__mulsf3_pse+0x64>
     f76:	9e 3f       	cpi	r25, 0xFE	; 254
     f78:	51 05       	cpc	r21, r1
     f7a:	80 f0       	brcs	.+32     	; 0xf9c <__mulsf3_pse+0xa0>
     f7c:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
     f80:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_szero>
     f84:	5f 3f       	cpi	r21, 0xFF	; 255
     f86:	e4 f3       	brlt	.-8      	; 0xf80 <__mulsf3_pse+0x84>
     f88:	98 3e       	cpi	r25, 0xE8	; 232
     f8a:	d4 f3       	brlt	.-12     	; 0xf80 <__mulsf3_pse+0x84>
     f8c:	86 95       	lsr	r24
     f8e:	77 95       	ror	r23
     f90:	67 95       	ror	r22
     f92:	b7 95       	ror	r27
     f94:	f7 95       	ror	r31
     f96:	e7 95       	ror	r30
     f98:	9f 5f       	subi	r25, 0xFF	; 255
     f9a:	c1 f7       	brne	.-16     	; 0xf8c <__mulsf3_pse+0x90>
     f9c:	fe 2b       	or	r31, r30
     f9e:	88 0f       	add	r24, r24
     fa0:	91 1d       	adc	r25, r1
     fa2:	96 95       	lsr	r25
     fa4:	87 95       	ror	r24
     fa6:	97 f9       	bld	r25, 7
     fa8:	08 95       	ret
     faa:	19 f4       	brne	.+6      	; 0xfb2 <__mulsf3_pse+0xb6>
     fac:	16 f4       	brtc	.+4      	; 0xfb2 <__mulsf3_pse+0xb6>
     fae:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
     fb2:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__fp_mpack>

00000fb6 <sqrt>:
     fb6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fp_splitA>
     fba:	b8 f3       	brcs	.-18     	; 0xfaa <__mulsf3_pse+0xae>
     fbc:	99 23       	and	r25, r25
     fbe:	c9 f3       	breq	.-14     	; 0xfb2 <__mulsf3_pse+0xb6>
     fc0:	b6 f3       	brts	.-20     	; 0xfae <__mulsf3_pse+0xb2>
     fc2:	9f 57       	subi	r25, 0x7F	; 127
     fc4:	55 0b       	sbc	r21, r21
     fc6:	87 ff       	sbrs	r24, 7
     fc8:	0e 94 2d 08 	call	0x105a	; 0x105a <__fp_norm2>
     fcc:	00 24       	eor	r0, r0
     fce:	a0 e6       	ldi	r26, 0x60	; 96
     fd0:	40 ea       	ldi	r20, 0xA0	; 160
     fd2:	90 01       	movw	r18, r0
     fd4:	80 58       	subi	r24, 0x80	; 128
     fd6:	56 95       	lsr	r21
     fd8:	97 95       	ror	r25
     fda:	28 f4       	brcc	.+10     	; 0xfe6 <sqrt+0x30>
     fdc:	80 5c       	subi	r24, 0xC0	; 192
     fde:	66 0f       	add	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	88 1f       	adc	r24, r24
     fe4:	20 f0       	brcs	.+8      	; 0xfee <sqrt+0x38>
     fe6:	26 17       	cp	r18, r22
     fe8:	37 07       	cpc	r19, r23
     fea:	48 07       	cpc	r20, r24
     fec:	30 f4       	brcc	.+12     	; 0xffa <sqrt+0x44>
     fee:	62 1b       	sub	r22, r18
     ff0:	73 0b       	sbc	r23, r19
     ff2:	84 0b       	sbc	r24, r20
     ff4:	20 29       	or	r18, r0
     ff6:	31 29       	or	r19, r1
     ff8:	4a 2b       	or	r20, r26
     ffa:	a6 95       	lsr	r26
     ffc:	17 94       	ror	r1
     ffe:	07 94       	ror	r0
    1000:	20 25       	eor	r18, r0
    1002:	31 25       	eor	r19, r1
    1004:	4a 27       	eor	r20, r26
    1006:	58 f7       	brcc	.-42     	; 0xfde <sqrt+0x28>
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	88 1f       	adc	r24, r24
    100e:	20 f0       	brcs	.+8      	; 0x1018 <sqrt+0x62>
    1010:	26 17       	cp	r18, r22
    1012:	37 07       	cpc	r19, r23
    1014:	48 07       	cpc	r20, r24
    1016:	30 f4       	brcc	.+12     	; 0x1024 <sqrt+0x6e>
    1018:	62 0b       	sbc	r22, r18
    101a:	73 0b       	sbc	r23, r19
    101c:	84 0b       	sbc	r24, r20
    101e:	20 0d       	add	r18, r0
    1020:	31 1d       	adc	r19, r1
    1022:	41 1d       	adc	r20, r1
    1024:	a0 95       	com	r26
    1026:	81 f7       	brne	.-32     	; 0x1008 <sqrt+0x52>
    1028:	b9 01       	movw	r22, r18
    102a:	84 2f       	mov	r24, r20
    102c:	91 58       	subi	r25, 0x81	; 129
    102e:	88 0f       	add	r24, r24
    1030:	96 95       	lsr	r25
    1032:	87 95       	ror	r24
    1034:	08 95       	ret

00001036 <square>:
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__mulsf3>

0000103e <__fp_mpack>:
    103e:	9f 3f       	cpi	r25, 0xFF	; 255
    1040:	31 f0       	breq	.+12     	; 0x104e <__fp_mpack_finite+0xc>

00001042 <__fp_mpack_finite>:
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	20 f4       	brcc	.+8      	; 0x104e <__fp_mpack_finite+0xc>
    1046:	87 95       	ror	r24
    1048:	77 95       	ror	r23
    104a:	67 95       	ror	r22
    104c:	b7 95       	ror	r27
    104e:	88 0f       	add	r24, r24
    1050:	91 1d       	adc	r25, r1
    1052:	96 95       	lsr	r25
    1054:	87 95       	ror	r24
    1056:	97 f9       	bld	r25, 7
    1058:	08 95       	ret

0000105a <__fp_norm2>:
    105a:	91 50       	subi	r25, 0x01	; 1
    105c:	50 40       	sbci	r21, 0x00	; 0
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	d2 f7       	brpl	.-12     	; 0x105a <__fp_norm2>
    1066:	08 95       	ret

00001068 <_exit>:
    1068:	f8 94       	cli

0000106a <__stop_program>:
    106a:	ff cf       	rjmp	.-2      	; 0x106a <__stop_program>
